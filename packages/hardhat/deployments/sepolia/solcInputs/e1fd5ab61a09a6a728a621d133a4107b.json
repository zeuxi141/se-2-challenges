{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;  //Do not change the solidity version as it negativly impacts submission grading\r\n\r\ncontract ExampleExternalContract {\r\n\r\n  bool public completed;\r\n\r\n  function complete() public payable {\r\n    completed = true;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/Staker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./ExampleExternalContract.sol\";\r\n\r\ncontract Staker {\r\n\tExampleExternalContract public exampleExternalContract;\r\n\tmapping(address => uint256) public balances;\r\n\tuint256 public constant threshold = 1 ether;\r\n\tuint256 public deadline = block.timestamp + 72 hours;\r\n\tbool public openForWithdraw = false;\r\n\r\n\tevent Stake(address indexed user, uint256 amount);\r\n\r\n\tconstructor(address exampleExternalContractAddress) {\r\n\t\texampleExternalContract = ExampleExternalContract(\r\n\t\t\texampleExternalContractAddress\r\n\t\t);\r\n\t}\r\n\r\n\t// stake() function\r\n\tfunction stake() public payable {\r\n\t\trequire(block.timestamp < deadline, \"Staking period has ended\");\r\n\t\tbalances[msg.sender] += msg.value;\r\n\t\temit Stake(msg.sender, msg.value);\r\n\t}\r\n\r\n\t// execute() function\r\n\tfunction execute() public {\r\n\t\trequire(block.timestamp >= deadline, \"Deadline not reached\");\r\n\t\trequire(!exampleExternalContract.completed(), \"Already completed\");\r\n\r\n\t\tif (address(this).balance >= threshold) {\r\n\t\t\texampleExternalContract.complete{ value: address(this).balance }();\r\n\t\t} else {\r\n\t\t\topenForWithdraw = true;\r\n\t\t}\r\n\t}\r\n\r\n\t// withdraw() function\r\n\tfunction withdraw() public {\r\n\t\trequire(openForWithdraw, \"Withdrawals not allowed\");\r\n\t\trequire(balances[msg.sender] > 0, \"No balance to withdraw\");\r\n\r\n\t\tuint256 amount = balances[msg.sender];\r\n\t\tbalances[msg.sender] = 0;\r\n\t\t(bool success, ) = msg.sender.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Withdrawal failed\");\r\n\t}\r\n\r\n\t// timeLeft() view function\r\n\tfunction timeLeft() public view returns (uint256) {\r\n\t\tif (block.timestamp >= deadline) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn deadline - block.timestamp;\r\n\t\t}\r\n\t}\r\n\r\n\t// receive() function\r\n\treceive() external payable {\r\n\t\tstake();\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}